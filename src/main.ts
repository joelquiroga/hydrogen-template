
// Importa la funciÃ³n bootstrapApplication para iniciar la aplicaciÃ³n sin usar NgModule.
import { bootstrapApplication } from '@angular/platform-browser';
//Importa el componente principal de la aplicaciÃ³n (AppComponent), que serÃ¡ la raÃ­z de Angular.
import { AppComponent } from './app/app.component';
// Importa provideRouter() y las rutas definidas en app.routes.ts.
import { provideRouter } from '@angular/router';
import { routes } from './app/app.routes';
// Importa appConfig, que contiene los providers configurados en app.config.ts.
import { appConfig } from './app/app.config';

import { provideHttpClient } from '@angular/common/http';

/*
âœ…bootstrapApplication(AppComponent, {...}) inicia la aplicaciÃ³n de Angular con la configuraciÃ³n adecuada.
âœ… providers: [...appConfig.providers, provideRouter(routes)] fusiona los proveedores definidos en appConfig con los del enrutador.
âœ… .catch(err => console.error(err)); captura y muestra errores si algo falla en el arranque de la aplicaciÃ³n.
*/

bootstrapApplication(AppComponent, {
  providers: [...appConfig.providers, provideRouter(routes),provideHttpClient()]
}).catch(err => console.error(err));

/*
Con este cambio, no perderÃ¡s la configuraciÃ³n de routes ni de appConfig.
Ahora, todo se ejecuta correctamente en una Ãºnica llamada a bootstrapApplication.ğŸš€
*/
